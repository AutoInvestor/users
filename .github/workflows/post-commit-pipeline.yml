name: Commit to Main Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build_test_release:
    runs-on: ubuntu-22.04
    outputs:
      new-version: ${{ steps.calculate_version.outputs.NEW_VERSION }}
      bump: ${{ steps.version_increment.outputs.bump }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Get merged pull request
        id: get_merged_pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="0.0.0"
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Determine version increment
        id: version_increment
        run: |
          LABELS="${{ steps.get_merged_pr.outputs.labels }}"
          BUMP="none"
          if [[ "$LABELS" == *"major"* ]]; then
            BUMP="major"
          elif [[ "$LABELS" == *"minor"* ]]; then
            BUMP="minor"
          elif [[ "$LABELS" == *"patch"* ]]; then
            BUMP="patch"
          fi
          echo "bump=$BUMP" >> $GITHUB_OUTPUT

      - name: Calculate new version (Semantic Versioning)
        id: calculate_version
        run: |
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "0.0.0" ]; then
            VERSION="0.0.0"
          else
            VERSION=${LATEST_TAG#v}
          fi
          IFS='.' read -r major minor patch <<< "$VERSION"
          BUMP=${{ steps.version_increment.outputs.bump }}
          if [ "$BUMP" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$BUMP" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          elif [ "$BUMP" = "patch" ]; then
            patch=$((patch + 1))
          fi
          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build & Test
        run: ./gradlew clean build

      - name: Run Linter Check
        run: ./gradlew spotlessCheck

      - name: Build & push docker image
        if: steps.version_increment.outputs.bump != 'none'
        env:
          DOCKER_IMAGE_VERSION: "${{ steps.calculate_version.outputs.NEW_VERSION }}"
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: ./gradlew bootBuildImage

      - name: Create GitHub Release
        if: steps.version_increment.outputs.bump != 'none'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ steps.calculate_version.outputs.NEW_VERSION }}"
          release_name: "${{ steps.calculate_version.outputs.NEW_VERSION }}"
          draft: false
          prerelease: false

  update-cd-repo:
    uses: AutoInvestor/infra-gitops/.github/workflows/update-version.yml@main
    needs: build_test_release
    if: needs.build_test_release.outputs.bump != 'none'
    with:
      image: autoinvestor-users
      version: ${{ needs.build_test_release.outputs.new-version }}
    secrets: inherit