name: Commit to Main Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build_test_release:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Get merged pull request
        id: get_merged_pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="0.0.0"
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Determine version increment
        id: version_increment
        run: |
          LABELS="${{ steps.get_merged_pr.outputs.labels }}"
          BUMP="none"
          if [[ "$LABELS" == *"major"* ]]; then
            BUMP="major"
          elif [[ "$LABELS" == *"minor"* ]]; then
            BUMP="minor"
          elif [[ "$LABELS" == *"patch"* ]]; then
            BUMP="patch"
          fi
          echo "bump=$BUMP" >> $GITHUB_OUTPUT

      - name: Calculate new version (Semantic Versioning)
        id: calculate_version
        run: |
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "0.0.0" ]; then
            VERSION="0.0.0"
          else
            VERSION=${LATEST_TAG#v}
          fi
          IFS='.' read -r major minor patch <<< "$VERSION"
          BUMP=${{ steps.version_increment.outputs.bump }}
          if [ "$BUMP" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$BUMP" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          elif [ "$BUMP" = "patch" ]; then
            patch=$((patch + 1))
          fi
          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build & Test
        run: ./gradlew clean build

      - name: Run Linter Check
        run: ./gradlew spotlessCheck

      - name: Create GitHub Release
        if: steps.version_increment.outputs.bump != 'none'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.NEW_VERSION }}"
          release_name: "${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false

      - name: Find built JAR
        if: steps.version_increment.outputs.bump != 'none'
        id: find_jar
        run: |
          FILE=$(find build/libs -name "*.jar" | head -n 1)
          if [ -z "$FILE" ]; then
            exit 1
          fi
          echo "jar_file=$FILE" >> $GITHUB_OUTPUT

      - name: Upload JAR to Release
        if: steps.version_increment.outputs.bump != 'none'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_jar.outputs.jar_file }}
          asset_name: autoinvestor-${{ github.event.repository.name }}-${{ env.NEW_VERSION }}.jar
          asset_content_type: application/java-archive

      - name: Create app.jar
        if: steps.version_increment.outputs.bump != 'none'
        run: mv "${{ steps.find_jar.outputs.jar_file }}" app.jar

      - name: Log in to Docker Hub
        if: steps.version_increment.outputs.bump != 'none'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        if: steps.version_increment.outputs.bump != 'none'
        run: |
          docker build \
            --build-arg NEW_VERSION=${{ env.NEW_VERSION }} \
            -t ${{ vars.DOCKERHUB_NAMESPACE }}/autoinvestor-${{ github.event.repository.name }}:${{ env.NEW_VERSION }} \
            -t ${{ vars.DOCKERHUB_NAMESPACE }}/autoinvestor-${{ github.event.repository.name }}:latest \
            .

      - name: Push Docker Image
        if: steps.version_increment.outputs.bump != 'none'
        run: |
          docker push ${{ vars.DOCKERHUB_NAMESPACE }}/autoinvestor-${{ github.event.repository.name }}:${{ env.NEW_VERSION }}
          docker push ${{ vars.DOCKERHUB_NAMESPACE }}/autoinvestor-${{ github.event.repository.name }}:latest

      - name: Update Deployment in CD Repository
        if: steps.version_increment.outputs.bump != 'none'
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}
          CD_REPO_TOKEN: ${{ secrets.CD_REPO_TOKEN }}
        run: |
          git clone https://x-access-token:${CD_REPO_TOKEN}@github.com/AutoInvestor/infra-gitops.git
          cd infra-gitops

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          sed -i "/docker.io\/polpinol98\/autoinvestor-${{ github.event.repository.name }}/ {N;s/\(version:[[:space:]]*\).*/\1${NEW_VERSION}/;}" config/deployment-config.yaml

          git add config/deployment-config.yaml
          git commit -m "Update ${{ github.event.repository.name }} version to ${NEW_VERSION}"
          git push origin main
